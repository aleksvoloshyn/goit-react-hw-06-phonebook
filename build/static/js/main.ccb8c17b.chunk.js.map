{"version":3,"sources":["Components/Filter/Filter.module.css","Components/Container/Container.jsx","Components/ContactForm/ContactForm.jsx","Components/Filter/Filter.jsx","Components/ContactList/ContactList.jsx","App.js","hooks/useLocalStorage.js","Components/Notifications/Notifications.jsx","reportWebVitals.js","index.js","Components/Container/Container.module.css","Components/ContactForm/ContactForm.module.css","Components/ContactList/ContactList.module.css"],"names":["module","exports","Container","props","className","s","container","children","ContactForm","onSubmit","useState","name","setName","number","setNumber","handleChange","target","value","action","e","preventDefault","contactForm","contactForm__label","htmlFor","type","placeholder","pattern","title","required","onChange","Button","Filter","filter__input","ContactList","contacts","deleteContact","map","cont","contactList__item","contactList__name","contactList__number","variant","onClick","id","defaultContacts","App","key","defaultValue","JSON","parse","window","localStorage","getItem","state","setState","useEffect","setItem","stringify","useLocalStotage","setContacts","filter","setFilter","console","log","container__label","contact","newName","find","store","addNotification","message","animationIn","animationOut","dismiss","duration","onScreen","touchSlidingExit","swipe","timingFunction","delay","fade","uuidv4","insert","container__contacts","event","currentTarget","trim","toLowerCase","includes","prev","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ccb8c17b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"filter__input\":\"Filter_filter__input__3Ro3_\"};","import s from './Container.module.css';\nfunction Container(props) {\n  return <div className={s.container}> {props.children}</div>;\n}\n\nexport { Container };\n","import { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button } from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport s from './ContactForm.module.css';\n\nconst ContactForm = ({ onSubmit }) => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const handleChange = ({ target }) => {\n    // const { name, value } = target;\n    // switch (name) {\n    //   case 'name':\n    //     setName(value);\n    //     break;\n    //   case 'number':\n    //     setNumber(value);\n    //     break;\n    //   default:\n    //     throw new Error();\n    // }\n    if (target.name === 'name') {\n      setName(target.value);\n    }\n    if (target.name === 'number') {\n      setNumber(target.value);\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    onSubmit({ name, number });\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <div>\n      <form action=\"\" onSubmit={handleSubmit} className={s.contactForm}>\n        <label className={s.contactForm__label} htmlFor=\"\">\n          Name\n          <input\n            type=\"text\"\n            name=\"name\"\n            placeholder=\"John Snow\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n            value={name}\n            onChange={handleChange}\n          />\n        </label>\n        <label className={s.contactForm__label} htmlFor=\"\">\n          Number\n          <input\n            type=\"tel\"\n            name=\"number\"\n            placeholder=\"+38(093)9995040\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            required\n            value={number}\n            onChange={handleChange}\n          />\n        </label>\n        <Button type=\"submit\">Add contact</Button>\n      </form>\n    </div>\n  );\n};\n\nContactForm.propTypes = {\n  name: PropTypes.string,\n  phone: PropTypes.number,\n};\n// const INITIAL_STATE = {\n//   name: '',\n//   number: '',\n// };\n\n// class ContactForm extends React.Component {\n//   state = { ...INITIAL_STATE };\n\n//   handleChange = ({ target }) => {\n//     const { name, value } = target;\n\n//     this.setState({ [name]: value });\n//   };\n\n//   handleSubmit = e => {\n//     e.preventDefault();\n//     this.props.onSubmit(this.state);\n//     this.clearInput();\n//   };\n\n//   clearInput = () => {\n//     this.setState({ ...INITIAL_STATE });\n//   };\n\n//   render() {\n//     return (\n//       <div>\n//         <form action=\"\" onSubmit={this.handleSubmit} className={s.contactForm}>\n//           <label className={s.contactForm__label} htmlFor=\"\">\n//             Name\n//             <input\n//               type=\"text\"\n//               name=\"name\"\n//               placeholder=\"John Snow\"\n//               pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n//               title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n//               required\n//               value={this.state.name}\n//               onChange={this.handleChange}\n//             />\n//           </label>\n//           <label className={s.contactForm__label} htmlFor=\"\">\n//             Number\n//             <input\n//               type=\"tel\"\n//               name=\"number\"\n//               placeholder=\"+38(093)9995040\"\n//               pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n//               title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n//               required\n//               value={this.state.number}\n//               onChange={this.handleChange}\n//             />\n//           </label>\n//           <Button type=\"submit\">Add contact</Button>\n//         </form>\n//       </div>\n//     );\n//   }\n// }\n\nexport { ContactForm };\n","import PropTypes from 'prop-types';\nimport s from './Filter.module.css';\n\nfunction Filter({ name, onChange }) {\n  return (\n    <>\n      <label htmlFor=\"\">\n        Find contacts by name\n        <input\n          className={s.filter__input}\n          type=\"text\"\n          name={name}\n          placeholder=\"find by name..\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n          onChange={onChange}\n        />\n      </label>\n    </>\n  );\n}\n\nFilter.propTypes = {\n  onChange: PropTypes.func.isRequired,\n  name: PropTypes.string.isRequired,\n};\n\nexport { Filter };\n","import PropTypes from 'prop-types';\nimport { Button } from 'react-bootstrap';\nimport s from './ContactList.module.css';\n\nfunction ContactList({ contacts, deleteContact }) {\n  //   contacts = [\n  //     { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n  //     { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n  //     { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n  //     { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n  //   ];\n\n  return (\n    <div>\n      <ul>\n        {contacts.map(cont => {\n          return (\n            <li className={s.contactList__item} key={cont.id}>\n              <span className={s.contactList__name}>{cont.name}</span>\n              <span className={s.contactList__number}>{cont.number}</span>\n              <Button variant=\"danger\" onClick={() => deleteContact(cont.id)}>\n                Delete\n              </Button>\n            </li>\n          );\n        })}\n      </ul>\n    </div>\n  );\n}\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({ id: PropTypes.string.isRequired }),\n  ),\n};\n\nexport { ContactList };\n","import './App.css';\n// import React from 'react';\nimport { useState } from 'react';\nimport { useLocalStotage } from './hooks/useLocalStorage';\nimport { Container } from './Components/Container/Container';\nimport { ContactForm } from './Components/ContactForm/ContactForm';\nimport { Filter } from './Components/Filter/Filter';\nimport { ContactList } from './Components/ContactList/ContactList';\nimport { v4 as uuidv4 } from 'uuid';\nimport ReactNotifications from 'react-notifications-component';\nimport {\n  onSuccsessNotification,\n  onErrorNotification,\n  onDeleteNotification,\n} from './Components/Notifications/Notifications';\nimport s from './../src/Components/Container/Container.module.css';\n\nimport 'react-notifications-component/dist/theme.css';\nimport 'animate.css';\nconst defaultContacts = [\n  { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n  { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n  { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n  { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n];\n\nconst App = () => {\n  const [contacts, setContacts] = useLocalStotage('contacts', defaultContacts);\n  const [filter, setFilter] = useState('');\n\n  // Удалить текущий контакт +\n  const onDeleteContact = id => {\n    setContacts(prev => prev.filter(cont => cont.id !== id));\n\n    onDeleteNotification();\n  };\n\n  // Проверка на повтор +\n  const duplicationCheck = newName => {\n    return contacts.find(contact => {\n      return contact.name === newName;\n    });\n  };\n\n  //Добавить новый контакт +\n  const addContact = contact => {\n    console.log(contact);\n    if (!duplicationCheck(contact.name)) {\n      setContacts([\n        {\n          id: uuidv4(),\n          name: contact.name,\n          number: contact.number,\n        },\n        ...contacts,\n      ]);\n      onSuccsessNotification();\n      return;\n    } else {\n      onErrorNotification();\n      console.log(contacts);\n      return;\n    }\n  };\n\n  // Устанваливить значение filter  в state +\n  const switchFilter = event => {\n    setFilter(event.currentTarget.value.trim());\n  };\n\n  console.log(filter);\n  // Фильтр +\n  const getFilteredResult = () => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase()),\n    );\n  };\n\n  return (\n    <div className=\"App\">\n      <ReactNotifications />\n      <Container>\n        <h1 className={s.container__label}>Phonebook</h1>\n        <ContactForm onSubmit={addContact} />\n\n        <h2 className={s.container__contacts}>Contacts</h2>\n        <Filter name={filter} onChange={switchFilter} />\n        <ContactList\n          contacts={getFilteredResult()}\n          deleteContact={onDeleteContact}\n        />\n      </Container>\n    </div>\n  );\n};\n// class App extends React.Component {\n//   constructor() {\n//     super();\n//     this.state = {\n//       contacts: [\n//         { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n//         { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n//         { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n//         { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n//       ],\n//       filter: '',\n//     };\n//   }\n\n//   // Удалить текущий контакт\n//   onDeleteContact = id => {\n//     this.setState({\n//       contacts: this.state.contacts.filter(cont => cont.id !== id),\n//     });\n//     onDeleteNotification();\n//   };\n\n//   // Проверка на повтор\n//   duplicationCheck = newName => {\n//     return this.state.contacts.find(contact => {\n//       return contact.name === newName;\n//     });\n//   };\n\n//   //Добавить новый контакт\n//   addContact = contact => {\n//     console.log(contact);\n//     if (!this.duplicationCheck(contact.name)) {\n//       this.setState({\n//         contacts: [\n//           {\n//             id: uuidv4(),\n//             name: contact.name,\n//             number: contact.number,\n//           },\n//           ...this.state.contacts,\n//         ],\n//       });\n//       onSuccsessNotification();\n//       return;\n//     } else {\n//       onErrorNotification();\n//       return;\n//     }\n//   };\n\n//   // Устанваливить значение filter  в state\n//   setFilter = event => {\n//     this.setState({ filter: event.currentTarget.value.trim() });\n//   };\n\n//   // Фильтр\n//   getFilteredResult = () => {\n//     const { filter, contacts } = this.state;\n\n//     return contacts.filter(contact =>\n//       contact.name.toLowerCase().includes(filter.toLowerCase()),\n//     );\n//   };\n\n//   componentDidMount() {\n//     const contacts = localStorage.getItem('contacts');\n//     const parsedContacts = JSON.parse(contacts);\n//     if (parsedContacts) {\n//       this.setState({ contacts: parsedContacts });\n//     }\n//   }\n\n//   componentDidUpdate(prevProps, prevState) {\n//     if (this.state.contacts !== prevState.contacts) {\n//       console.log('contacts have been updated');\n//       localStorage.setItem('contacts', JSON.stringify(this.state.contacts));\n//     }\n//   }\n\n//   render() {\n//     return (\n//       <div className=\"App\">\n//         <ReactNotifications />\n//         <Container>\n//           <h1 className={s.container__label}>Phonebook</h1>\n//           <ContactForm onSubmit={this.addContact} />\n\n//           <h2 className={s.container__contacts}>Contacts</h2>\n//           <Filter name={this.state.filter} onChange={this.setFilter} />\n//           <ContactList\n//             contacts={this.getFilteredResult()}\n//             deleteContact={this.onDeleteContact}\n//           />\n//         </Container>\n//       </div>\n//     );\n//   }\n// }\n\nexport default App;\n","import { useState, useEffect } from 'react';\n\nconst useLocalStotage = (key, defaultValue) => {\n  const [state, setState] = useState(() => {\n    return JSON.parse(window.localStorage.getItem(key)) ?? defaultValue;\n  });\n\n  useEffect(() => {\n    window.localStorage.setItem(key, JSON.stringify(state));\n  }, [key, state]);\n\n  return [state, setState];\n};\n\nexport { useLocalStotage };\n","import { store } from 'react-notifications-component';\nexport const onSuccsessNotification = () => {\n  store.addNotification({\n    title: 'Congratulations!',\n    message: 'Контакт успешно добавлен в справочник',\n    type: 'success',\n    insert: 'top',\n    container: 'top-right',\n    animationIn: ['animate__animated', 'animate__fadeIn'],\n    animationOut: ['animate__animated', 'animate__fadeOut'],\n    dismiss: {\n      duration: 5000,\n      onScreen: true,\n    },\n  });\n};\n\nexport const onErrorNotification = () => {\n  store.addNotification({\n    title: 'Ошибочка...!',\n    message: 'Такой контакт уже есть',\n    type: 'danger', // 'default', 'success', 'info', 'warning'\n    container: 'top-right', // where to position the notifications\n    animationIn: ['animate__animated', 'animate__fadeIn'],\n    animationOut: ['animate__animated', 'animate__fadeOut'],\n    dismiss: {\n      duration: 2000,\n      onScreen: true,\n    },\n    touchSlidingExit: {\n      swipe: {\n        duration: 400,\n        timingFunction: 'ease-out',\n        delay: 0,\n      },\n      fade: {\n        duration: 400,\n        timingFunction: 'ease-out',\n        delay: 0,\n      },\n    },\n  });\n  //   alert('Такой контакт уже есть');\n};\n\nexport const onDeleteNotification = () => {\n  store.addNotification({\n    title: 'Информация!',\n    message: 'Констакт успешно удален',\n    type: 'warning', // 'default', 'success', 'info', 'warning'\n    container: 'top-right', // where to position the notifications\n    animationIn: ['animate__animated', 'animate__fadeIn'],\n    animationOut: ['animate__animated', 'animate__fadeOut'],\n    dismiss: {\n      duration: 2000,\n      onScreen: true,\n    },\n    touchSlidingExit: {\n      swipe: {\n        duration: 400,\n        timingFunction: 'ease-out',\n        delay: 0,\n      },\n      fade: {\n        duration: 400,\n        timingFunction: 'ease-out',\n        delay: 0,\n      },\n    },\n  });\n};\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Container_container__3Gm4e\",\"container__label\":\"Container_container__label__2PsCL\",\"container__contacts\":\"Container_container__contacts__1agmc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactForm\":\"ContactForm_contactForm__gi9ve\",\"contactForm__label\":\"ContactForm_contactForm__label__2UGmG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactList__item\":\"ContactList_contactList__item__3RecD\",\"contactList__name\":\"ContactList_contactList__name__1hI4P\",\"contactList__number\":\"ContactList_contactList__number__2Vqyi\"};"],"sourceRoot":""}